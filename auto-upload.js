const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
const PHOTOS_FOLDER = './images/portfolio/primer';
const DATA_FILE = './data/existing-photos.json';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
function addNewPhotos() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –ø–∞–ø–∫–µ primer...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞
    if (!fs.existsSync(PHOTOS_FOLDER)) {
        console.log('‚ùå –ü–∞–ø–∫–∞ images/portfolio/primer –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    let existingPhotos = [];
    if (fs.existsSync(DATA_FILE)) {
        const data = fs.readFileSync(DATA_FILE, 'utf8');
        existingPhotos = JSON.parse(data);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ primer
    const files = fs.readdirSync(PHOTOS_FOLDER);
    const imageFiles = files.filter(file => {
        const ext = path.extname(file).toLowerCase();
        return ['.jpg', '.jpeg', '.png', '.webp'].includes(ext);
    });
    
    if (imageFiles.length === 0) {
        console.log('‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ø–∞–ø–∫–µ primer –Ω–µ—Ç');
        return;
    }
    
    console.log(`üì∏ –ù–∞–π–¥–µ–Ω–æ ${imageFiles.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ø–∞–ø–∫–µ primer:`);
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    existingPhotos = [];
    
    imageFiles.forEach((file, index) => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        let category = '–º–∞–Ω–∏–∫—é—Ä'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const fileName = file.toLowerCase();
        
        // –ï—Å–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å—Ç—Ä–∏–∂–µ–∫
        if (fileName.includes('–≤–æ–ª–æ—Å') || fileName.includes('—Å—Ç—Ä–∏–∂–∫') || fileName.includes('–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏') || fileName.includes('–º–µ–ª–∏—Ä–æ–≤–∞–Ω–∏') || fileName.includes('–ª–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏') || fileName.includes('–∫–æ–ª–æ—Ä–∏—Å—Ç–∏–∫')) {
            category = '—Å—Ç—Ä–∏–∂–∫–∏';
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        const newPhoto = {
            id: index + 1, // –ø—Ä–æ—Å—Ç–æ–π ID
            category: category,
            src: `images/portfolio/primer/${file}`,
            fileName: file,
            description: `–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã - ${path.parse(file).name}`,
            uploadDate: new Date().toISOString()
        };
        
        existingPhotos.push(newPhoto);
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞: ${file} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category})`);
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    fs.writeFileSync(DATA_FILE, JSON.stringify(existingPhotos, null, 2));
    console.log(`\nüéâ –î–æ–±–∞–≤–ª–µ–Ω–æ ${existingPhotos.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!`);
    console.log(`üìä –í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${existingPhotos.length}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ JSON)
function clearData() {
    fs.writeFileSync(DATA_FILE, JSON.stringify([], null, 2));
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);

if (args.includes('--clear')) {
    clearData();
} else {
    addNewPhotos();
}

module.exports = { addNewPhotos, clearData };
